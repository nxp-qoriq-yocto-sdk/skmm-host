/* Copyright 2013 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of Freescale Semiconductor nor the
 * names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

static uint8_t C[] = {
    0xcf, 0x50, 0x78, 0xd3, 0x8c, 0x94, 0x20, 0x5c, 0x48, 0x8c, 0xd5, 0x68,
    0x36, 0xce, 0x39, 0x95, 0xad, 0x87, 0x27, 0x0, 0x3, 0x80, 0x4e, 0x14, 
    0x6a, 0x80, 0x30, 0xd8, 0x82, 0x8d, 0xd8, 0xf1
};

static uint8_t D[] = {
    0x43, 0xd7, 0x15, 0x75, 0x7c, 0x29, 0x13, 0x98, 0x80, 0xc2, 0x3b, 0x5d, 
    0x64, 0x8a, 0xe7, 0xb3, 0x7, 0xeb, 0x84, 0x66, 0x24, 0xc1, 0xf2, 0x87, 
    0x9e, 0xeb, 0xc1, 0x8c, 0x9b, 0xc2, 0x91, 0x93
};

static int d_len = sizeof(D);

#if 0
static uint8_t M_256[] = {
        0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9,
            0x30, 0xba, 0x7c, 0xe6, 0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37,
                0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9

/*                
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80, 0X0F, 0X19,
    0X2B, 0X95, 0XFF, 0XC2, 0X24, 0X30, 0X42, 0X80, 0X8A,
    0X78, 0X27, 0X3D, 0X3C,
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80, 0X0F, 0X19, 0X2B, 0X95, 0XFF, 0XC2, 0X24, 0X30, 0X42, 0X80, 0X8A,
    0X78, 0X27, 0X3D, 0X3C,
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80, 0X0F, 0X19, 0X2B, 0X95, 0XFF, 0XC2, 0X24, 0X30, 0X42, 0X80, 0X8A,
    0X78, 0X27, 0X3D, 0X3C,
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80, 0X0F, 0X19, 0X2B, 0X95, 0XFF, 0XC2, 0X24, 0X30, 0X42, 0X80, 0X8A,
    0X78, 0X27, 0X3D, 0X3C,
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80, 0X0F, 0X19, 0X2B, 0X95, 0XFF, 0XC2, 0X24, 0X30, 0X42, 0X80, 0X8A,
    0X78, 0X27, 0X3D, 0X3C,
    0X0F, 0X67, 0XCB, 0XF2, 0X0E, 0XB4, 0X3A, 0X18, 0X80, 0X0F, 0X19, 0X2B,
    0X95, 0XFF, 0XC2, 0X24,
    0X30, 0X42, 0X80, 0X8A, 0X78, 0X27, 0X3D, 0X3C, 0X0F, 0X67, 0XCB, 0XF2,
    0X0E, 0XB4, 0X3A, 0X18,
    0X80 */
};

static int m_256_len = sizeof(M_256);
#endif

/* *************** For P-256 Buffers *************** */

static uint8_t M_256[] = {
    0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9,
    0x30, 0xba, 0x7c, 0xe6, 0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37,
    0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9
};

static int m_256_len = sizeof(M_256);

static uint8_t Q_256[] = {
      0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,    /* p */
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF
};

static int32_t q_256_len = sizeof(Q_256);

static uint8_t AB_256[] = {
      0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,    /* a */
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFC,
      0x5A,0xC6,0x35,0xD8,0xAA,0x3A,0x93,0xE7,0xB3,0xEB,    /* b */
      0xBD,0x55,0x76,0x98,0x86,0xBC,0x65,0x1D,0x06,0xB0,
      0xCC,0x53,0xB0,0xF6,0x3B,0xCE,0x3C,0x3E,0x27,0xD2,
      0x60,0x4B
};

static int32_t ab_256_len = sizeof(AB_256);

static uint8_t G_256[] = { 
      0x6B,0x17,0xD1,0xF2,0xE1,0x2C,0x42,0x47,0xF8,0xBC,    /* x */
      0xE6,0xE5,0x63,0xA4,0x40,0xF2,0x77,0x03,0x7D,0x81,
      0x2D,0xEB,0x33,0xA0,0xF4,0xA1,0x39,0x45,0xD8,0x98,
      0xC2,0x96,
      0x4f,0xe3,0x42,0xe2,0xfe,0x1a,0x7f,0x9b,0x8e,0xe7,    /* y */
      0xeb,0x4a,0x7c,0x0f,0x9e,0x16,0x2b,0xce,0x33,0x57,
      0x6b,0x31,0x5e,0xce,0xcb,0xb6,0x40,0x68,0x37,0xbf,
      0x51,0xf5
};

static int32_t g_256_len = sizeof(G_256);

static uint8_t R_256[] = {
      0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,    /* order */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBC,0xE6,0xFA,0xAD,
      0xA7,0x17,0x9E,0x84,0xF3,0xB9,0xCA,0xC2,0xFC,0x63,
      0x25,0x51
};

static int32_t r_256_len = sizeof(R_256);

static uint8_t PRIV_KEY_EC_256[] = {
    0x11,0x88,0x68,0xc1,0xbe,0x49,0x8c,0x38,0x9c,0xff,0xff,
    0x01,0x2d,0x9d,0x94,0x03,0x29,0x33,0x46,0x63,0x1f,0xad,
    0xb4,0xe5,0x3c,0x37,0x29,0x21,0x83,0x48,0xd0,0x7a
};

static int32_t priv_key_ec_256_len = sizeof(PRIV_KEY_EC_256);

static uint8_t PUB_KEY_EC_256[] = { 
    0x36,0x76,0xa4,0x4c,0x97,0x08,0xd1,0xac,0x82,0xb2,0x51,
    0x9e,0xe1,0xcd,0x3f,0xc2,0xb3,0x65,0xf9,0x4c,0xf6,0x5f,
    0x54,0x1c,0x68,0x97,0x8e,0xb0,0x1a,0x10,0xa0,0xc6,0x75,
    0x76,0x96,0xe6,0xe5,0x63,0x53,0xb8,0xb0,0xf3,0xef,0xed,
    0x13,0x91,0x32,0x10,0xfc,0x22,0xad,0xad,0xcd,0x39,0xe6,
    0x26,0x8c,0x9d,0x3a,0x9a,0x87,0xd4,0xe0,0x51
};

static int32_t pub_key_ec_256_len = sizeof(PUB_KEY_EC_256);


/* *************** For P-384 Buffers *************** */
static uint8_t C_384[] = {
    0x58, 0xbd, 0x66, 0x4e, 0xea, 0xb9, 0x56, 0xb1, 0xfb, 0x86, 
    0x6d, 0x86, 0xd6, 0xcf, 0x3b, 0xaf, 0x27, 0x30, 0x33, 0x22, 
    0x28, 0xb9, 0xf7, 0xae, 0xb4, 0xc2, 0xf6, 0x18, 0xf4, 0x3e, 
    0xdd, 0xb7, 0xe7, 0x4c, 0x36, 0xf2, 0xfa, 0x46, 0xf2, 0xd6, 
    0x2f, 0xe4, 0x2c, 0xd9, 0x38, 0x56, 0x70, 0xbe
};

static uint8_t D_384[] = {
    0xfb, 0x91, 0xbe, 0x19, 0xdf, 0xbd, 0xa5, 0xcb, 0x11, 0xc6, 
    0x19, 0xb9, 0x7c, 0x61, 0x95, 0x37, 0x70, 0x61, 0x51, 0x29, 
    0x1c, 0xfe, 0xf1, 0xfd, 0xef, 0xe5, 0x54, 0x4f, 0xc0, 0xfa, 
    0x47, 0xdb, 0x1f, 0xc7, 0x22, 0x91, 0x4f, 0xd7, 0xc3, 0x98, 
    0xba, 0x7, 0x8c, 0x5, 0x89, 0x68, 0xd5, 0x6f
};

static int32_t d_384_len = sizeof(D_384);

static uint8_t M_384[] = {
    0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9,
    0x30, 0xba, 0x7c, 0xe6, 0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37,
    0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9, 0x30, 0xba, 0x7c, 0xe6,
    0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb
};

static int m_384_len = sizeof(M_384);

static uint8_t Q_384[] = {
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* p */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF
};

static int32_t q_384_len = sizeof(Q_384);

static uint8_t AB_384[] = {
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* a */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFC,
      0xB3,0x31,0x2F,0xA7,0xE2,0x3E,0xE7,0xE4,0x98,0x8E,    /* b */
      0x05,0x6B,0xE3,0xF8,0x2D,0x19,0x18,0x1D,0x9C,0x6E,
      0xFE,0x81,0x41,0x12,0x03,0x14,0x08,0x8F,0x50,0x13,
      0x87,0x5A,0xC6,0x56,0x39,0x8D,0x8A,0x2E,0xD1,0x9D,
      0x2A,0x85,0xC8,0xED,0xD3,0xEC,0x2A,0xEF
};

static int32_t ab_384_len = sizeof(AB_384);

static uint8_t G_384[] = {
      0xAA,0x87,0xCA,0x22,0xBE,0x8B,0x05,0x37,0x8E,0xB1,    /* x */
      0xC7,0x1E,0xF3,0x20,0xAD,0x74,0x6E,0x1D,0x3B,0x62,
      0x8B,0xA7,0x9B,0x98,0x59,0xF7,0x41,0xE0,0x82,0x54,
      0x2A,0x38,0x55,0x02,0xF2,0x5D,0xBF,0x55,0x29,0x6C,
      0x3A,0x54,0x5E,0x38,0x72,0x76,0x0A,0xB7,
      0x36,0x17,0xde,0x4a,0x96,0x26,0x2c,0x6f,0x5d,0x9e,    /* y */
      0x98,0xbf,0x92,0x92,0xdc,0x29,0xf8,0xf4,0x1d,0xbd,
      0x28,0x9a,0x14,0x7c,0xe9,0xda,0x31,0x13,0xb5,0xf0,
      0xb8,0xc0,0x0a,0x60,0xb1,0xce,0x1d,0x7e,0x81,0x9d,
      0x7a,0x43,0x1d,0x7c,0x90,0xea,0x0e,0x5f
};

static int32_t g_384_len = sizeof(G_384);

static uint8_t R_384[] = {
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* order */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xC7,0x63,0x4D,0x81,0xF4,0x37,
      0x2D,0xDF,0x58,0x1A,0x0D,0xB2,0x48,0xB0,0xA7,0x7A,
      0xEC,0xEC,0x19,0x6A,0xCC,0xC5,0x29,0x73
};

static int32_t r_384_len = sizeof(R_384);

static uint8_t PRIV_KEY_EC_384[] = 
{
0x5c,0x20,0xb1,0xf5,0xac,0x75,0x3b,0xfa,0xb2,0xbe,0x48,0x48,0xe9,0xa7,0xda,
0x46,0x0e,0xc5,0xa7,0x7c,0x41,0x2f,0x3c,0x9e,0x09,0xa3,0xb1,0x38,0x39,0x5a,
0x08,0x83,0x84,0x10,0x53,0x7e,0x52,0xa0,0xad,0x57,0x7f,0x22,0x18,0x14,0x23,
0xa3,0xd6,0x00
};

static int32_t priv_key_ec_384_len = sizeof(PRIV_KEY_EC_384);

static uint8_t PUB_KEY_EC_384[] = 
{
0x11,0x19,0x2f,0xce,0x63,0x0c,0xf1,0x93,0xda,0xcd,0x86,0xb3,0x43,0x1e,
0xdf,0x44,0x75,0xf3,0x78,0x47,0xa3,0x0a,0x1a,0x2f,0xde,0x5d,0x66,0x2f,0x3d,
0xe9,0xd1,0x67,0x47,0xa0,0xb8,0x24,0xa1,0x3b,0x8a,0xb2,0xb4,0xb0,0xe6,0x64,
0xa0,0xe9,0xd8,0x59,0x91,0x38,0x4c,0x50,0x59,0x94,0x07,0x78,0xa2,0xca,0x71,
0x81,0x1a,0x84,0x54,0xc1,0xdf,0xb6,0x91,0x3b,0xc7,0x34,0x44,0x7e,0x80,0x3a,
0x90,0x9d,0x26,0x3a,0xcf,0x3d,0xfe,0x1e,0x21,0x12,0xbb,0x80,0xcf,0x34,0x91,
0x50,0x05,0xe5,0x65,0x83,0x40,0x46
};

static int32_t pub_key_ec_384_len = sizeof(PUB_KEY_EC_384);

/* *************** For P-521 Buffers *************** */
static uint8_t C_521[] = {
    0x1, 0x67, 0xbd, 0x69, 0x50, 0xd, 0x75, 0x43, 0x5e, 0x70, 0x5, 0x31, 
    0xff, 0x6d, 0xc2, 0xff, 0x4f, 0xe6, 0xc7, 0xd6, 0x10, 0x86, 0x27, 0xd8, 
    0x7b, 0x11, 0x33, 0xe5, 0xdc, 0xcf, 0xaf, 0x56, 0xa9, 0x30, 0x9b, 0xee, 
    0xd8, 0x3d, 0xba, 0x3, 0x76, 0x41, 0xa, 0xa5, 0x2e, 0xb4, 0xdf, 0x82, 
    0x6f, 0xaa, 0x2c, 0x91, 0x5a, 0x4f, 0x4a, 0x28, 0x6d, 0x31, 0x78, 0x86, 
    0xa3, 0x44, 0x5a, 0x38, 0x5b, 0xed
};

static uint8_t D_521[] = {
    0x0, 0x9b, 0x18, 0x3f, 0xfb, 0x63, 0x99, 0x98, 0xa5, 0x83, 0x10, 0x90, 
    0xe8, 0xf0, 0xc1, 0xf2, 0x53, 0xaf, 0xc7, 0x7c, 0x62, 0xc7, 0xaa, 0x70, 
    0xb2, 0x5, 0xbb, 0x79, 0xb, 0x22, 0x9d, 0xee, 0x80, 0x6, 0x59, 0x5f, 0xec, 
    0xf8, 0x3, 0x45, 0x8a, 0x5f, 0x69, 0x41, 0xa9, 0x46, 0x2c, 0x45, 0x25, 
    0x6d, 0xb, 0x6a, 0xb4, 0x63, 0x6, 0x81, 0xe4, 0xa4, 0xe, 0xa2, 0x30, 0x1a, 
    0xb4, 0x8, 0x21, 0xee
};

static int32_t d_521_len = sizeof(D_521);

static uint8_t M_521[] = {
    0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9,
    0x30, 0xba, 0x7c, 0xe6, 0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37,
    0xad, 0xc6, 0x22, 0xeb, 0x57, 0x4d, 0x87, 0xa9, 0x30, 0xba, 0x7c, 0xe6,
    0xe4, 0xd3, 0x9c, 0x88, 0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6, 0x22, 0xeb,
    0x57, 0x4d, 0x87, 0xa9, 0x30, 0xba, 0x7c, 0xe6, 0xe4, 0xd3, 0x9c, 0x88,
    0x3d, 0x72, 0x42, 0x37, 0xad, 0xc6
};

static int m_521_len = sizeof(M_521);

static int8_t Q_521[] = {
      0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* p */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
};

static int32_t q_521_len = sizeof(Q_521);

static int8_t AB_521[] = {
      0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* a */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,
      0x00,0x51,0x95,0x3E,0xB9,0x61,0x8E,0x1C,0x9A,0x1F,    /* b */
      0x92,0x9A,0x21,0xA0,0xB6,0x85,0x40,0xEE,0xA2,0xDA,
      0x72,0x5B,0x99,0xB3,0x15,0xF3,0xB8,0xB4,0x89,0x91,
      0x8E,0xF1,0x09,0xE1,0x56,0x19,0x39,0x51,0xEC,0x7E,
      0x93,0x7B,0x16,0x52,0xC0,0xBD,0x3B,0xB1,0xBF,0x07,
      0x35,0x73,0xDF,0x88,0x3D,0x2C,0x34,0xF1,0xEF,0x45,
      0x1F,0xD4,0x6B,0x50,0x3F,0x00
};

static int32_t ab_521_len = sizeof(AB_521);

static int8_t G_521[] = {
      0x00,0xC6,0x85,0x8E,0x06,0xB7,0x04,0x04,0xE9,0xCD,    /* x */
      0x9E,0x3E,0xCB,0x66,0x23,0x95,0xB4,0x42,0x9C,0x64,
      0x81,0x39,0x05,0x3F,0xB5,0x21,0xF8,0x28,0xAF,0x60,
      0x6B,0x4D,0x3D,0xBA,0xA1,0x4B,0x5E,0x77,0xEF,0xE7,
      0x59,0x28,0xFE,0x1D,0xC1,0x27,0xA2,0xFF,0xA8,0xDE,
      0x33,0x48,0xB3,0xC1,0x85,0x6A,0x42,0x9B,0xF9,0x7E,
      0x7E,0x31,0xC2,0xE5,0xBD,0x66,
      0x01,0x18,0x39,0x29,0x6a,0x78,0x9a,0x3b,0xc0,0x04,    /* y */
      0x5c,0x8a,0x5f,0xb4,0x2c,0x7d,0x1b,0xd9,0x98,0xf5,
      0x44,0x49,0x57,0x9b,0x44,0x68,0x17,0xaf,0xbd,0x17,
      0x27,0x3e,0x66,0x2c,0x97,0xee,0x72,0x99,0x5e,0xf4,
      0x26,0x40,0xc5,0x50,0xb9,0x01,0x3f,0xad,0x07,0x61,
      0x35,0x3c,0x70,0x86,0xa2,0x72,0xc2,0x40,0x88,0xbe,
      0x94,0x76,0x9f,0xd1,0x66,0x50
};

static int32_t g_521_len = sizeof(G_521);

static int8_t R_521[] = {
      0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    /* order */
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
      0xFF,0xFF,0xFF,0xFA,0x51,0x86,0x87,0x83,0xBF,0x2F,
      0x96,0x6B,0x7F,0xCC,0x01,0x48,0xF7,0x09,0xA5,0xD0,
      0x3B,0xB5,0xC9,0xB8,0x89,0x9C,0x47,0xAE,0xBB,0x6F,
      0xB7,0x1E,0x91,0x38,0x64,0x09
};

static int32_t r_521_len = sizeof(R_521);

static int8_t PRIV_KEY_EC_521[] = 
{
0x01,0x00,0x31,0xd3,0xb4,0x4a,0xcc,0x67,0xc6,0xed,0xc7,0xcc,0x87,0x4a,0x8d,
0xad,0x7d,0xb3,0x7d,0x05,0x06,0x95,0xbe,0x8c,0xe1,0x4c,0x35,0x6e,0x76,0xed,
0x6a,0x21,0x94,0xbf,0x3d,0x88,0xbd,0xe1,0xe2,0xc7,0x52,0x17,0xd6,0x9e,0x35,
0x17,0x6f,0x7b,0x2b,0xa5,0xa7,0x84,0x2f,0x7d,0xff,0x33,0xb8,0xc5,0xe5,0xc0,
0x61,0xb5,0x4d,0x79,0xaf,0xf1
};

static int32_t priv_key_ec_521_len = sizeof(PRIV_KEY_EC_521);

static int8_t PUB_KEY_EC_521[] = 
{
0x00,0xbb,0x3d,0x9f,0x6e,0xc5,0xfd,0x28,0x5c,0x88,0x1c,0x96,0x73,0xf4,
0xf8,0x8e,0x53,0xff,0x02,0x59,0x8b,0xa1,0x7e,0xec,0xea,0xef,0xcc,0x36,0xce,
0xb3,0x05,0x82,0xcc,0xdb,0x42,0x72,0xff,0x7b,0x57,0x12,0x9c,0x25,0x84,0xb9,
0x36,0x00,0x05,0x6e,0xe8,0xb9,0x3b,0xed,0xf3,0x66,0x5e,0x8e,0x54,0xde,0xf8,
0x5e,0xf9,0xf0,0xc6,0xc6,0xfa,0x70,0x00,0x61,0xd6,0x56,0xdd,0x99,0x66,0x05,
0xcd,0x49,0xd9,0x6a,0xa9,0x67,0x41,0xd6,0x5f,0xad,0x07,0xe5,0xec,0x5a,0x3f,
0xb2,0x96,0x37,0xd4,0x5c,0x80,0x39,0x88,0x1c,0x01,0x2b,0xd5,0x62,0xbe,0x79,
0x6a,0xe1,0x28,0x12,0x75,0x96,0xb8,0x52,0xf1,0xbc,0xe0,0xc6,0x37,0xa0,0x18,
0xda,0x72,0x5e,0xe8,0xff,0x1c,0x22,0x86,0x12,0x8f,0x9e,0x12,0xb3
};

static int32_t pub_key_ec_521_len = sizeof(PUB_KEY_EC_521);

